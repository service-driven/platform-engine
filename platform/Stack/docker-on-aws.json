{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Docker for AWS Beta 12 (docker 1.12.3-cs4) DDC",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "MinLength": "1",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "InstanceType": {
      "Type": "String",
      "Description": "EC2 HVM instance type (t2.medium, m3.medium, etc).",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 HVM instance type.",
      "Default": "t2.micro"
    },
    "ManagerInstanceType": {
      "Type": "String",
      "Description": "EC2 HVM instance type (m3.medium, m4.large etc).",
      "AllowedValues": [
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 HVM instance type.",
      "Default": "m3.medium"
    },
    "ClusterSize": {
      "Type": "Number",
      "Default": "5",
      "MinValue": "1",
      "MaxValue": "1000",
      "Description": "Number of worker nodes in the Swarm (1-1000)."
    },
    "ManagerSize": {
      "Type": "Number",
      "Default": "3",
      "AllowedValues": [
        "3",
        "5"
      ],
      "Description": "Number of Swarm manager nodes (3, 5)"
    },
    "DDCUsernameSet": {
      "Type": "String",
      "Description": "Docker Datacenter Username?",
      "ConstraintDescription": "Please enter the username you want to use for Docker Datacenter",
      "Default": "admin"
    },
    "DDCPasswordSet": {
      "Type": "String",
      "Description": "Docker Datacenter Password?",
      "ConstraintDescription": "Please enter the password you want to use for Docker Datacenter",
      "NoEcho": "true",
      "MinLength": "8",
      "MaxLength": "40",
      "ConstraintDescription": "must be at least 8 characters"
    },
    "License": {
      "Type": "String",
      "Description": "Docker Datacenter License in JSON format or URL to download it. Get Trial License here https://store.docker.com/bundles/docker-datacenter "
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Swarm Size"
          },
          "Parameters": [
            "ManagerSize",
            "ClusterSize"
          ]
        },
        {
          "Label": {
            "default": "Swarm Properties"
          },
          "Parameters": [
            "ManagerInstanceType",
            "InstanceType",
            "KeyName"
          ]
        },
        {
          "Label": {
            "default": "DDC Properties"
          },
          "Parameters": [
            "DDCUsernameSet",
            "DDCPasswordSet",
            "License"
          ]
        }
      ],
      "ParameterLabels": {
        "ManagerSize": {
          "default": "Number of Swarm managers?"
        },
        "ClusterSize": {
          "default": "Number of Swarm worker nodes?"
        },
        "InstanceType": {
          "default": "Agent worker instance type?"
        },
        "ManagerInstanceType": {
          "default": "Swarm manager instance type?"
        },
        "KeyName": {
          "default": "Which SSH key to use?"
        },
        "DDCUsernameSet": {
          "default": "Enter the Username you want to use with Docker Datacenter"
        },
        "DDCPasswordSet": {
          "default": "Enter your Docker Datacenter password"
        },
        "License": {
          "default": "Enter your Docker Datacenter License"
        }
      }
    }
  },
  "Mappings": {
    "DockerForAWS": {
      "version": {
        "docker": "1.12.3-cs4",
        "forAws": "aws-v1.12.3-cs4-beta12-ddc"
      }
    },
    "VpcCidrs": {
      "vpc": {
        "cidr": "172.31.0.0/16"
      },
      "pubsubnet1": {
        "cidr": "172.31.0.0/20"
      },
      "pubsubnet2": {
        "cidr": "172.31.16.0/20"
      },
      "pubsubnet3": {
        "cidr": "172.31.32.0/20"
      },
      "pubsubnet4": {
        "cidr": "172.31.48.0/20"
      }
    },
    "AWSInstanceType2Arch": {
      "t2.micro": {
        "Arch": "HVM64"
      },
      "t2.small": {
        "Arch": "HVM64"
      },
      "t2.medium": {
        "Arch": "HVM64"
      },
      "t2.large": {
        "Arch": "HVM64"
      },
      "m3.medium": {
        "Arch": "HVM64"
      },
      "m3.large": {
        "Arch": "HVM64"
      },
      "m3.xlarge": {
        "Arch": "HVM64"
      },
      "m3.2xlarge": {
        "Arch": "HVM64"
      },
      "m4.large": {
        "Arch": "HVM64"
      },
      "m4.xlarge": {
        "Arch": "HVM64"
      },
      "m4.2xlarge": {
        "Arch": "HVM64"
      },
      "m4.4xlarge": {
        "Arch": "HVM64"
      },
      "m4.10xlarge": {
        "Arch": "HVM64"
      },
      "c3.large": {
        "Arch": "HVM64"
      },
      "c3.xlarge": {
        "Arch": "HVM64"
      },
      "c3.2xlarge": {
        "Arch": "HVM64"
      },
      "c3.4xlarge": {
        "Arch": "HVM64"
      },
      "c3.8xlarge": {
        "Arch": "HVM64"
      },
      "c4.large": {
        "Arch": "HVM64"
      },
      "c4.xlarge": {
        "Arch": "HVM64"
      },
      "c4.2xlarge": {
        "Arch": "HVM64"
      },
      "c4.4xlarge": {
        "Arch": "HVM64"
      },
      "c4.8xlarge": {
        "Arch": "HVM64"
      },
      "g2.2xlarge": {
        "Arch": "HVMG2"
      },
      "r3.large": {
        "Arch": "HVM64"
      },
      "r3.xlarge": {
        "Arch": "HVM64"
      },
      "r3.2xlarge": {
        "Arch": "HVM64"
      },
      "r3.4xlarge": {
        "Arch": "HVM64"
      },
      "r3.8xlarge": {
        "Arch": "HVM64"
      },
      "i2.xlarge": {
        "Arch": "HVM64"
      },
      "i2.2xlarge": {
        "Arch": "HVM64"
      },
      "i2.4xlarge": {
        "Arch": "HVM64"
      },
      "i2.8xlarge": {
        "Arch": "HVM64"
      },
      "d2.xlarge": {
        "Arch": "HVM64"
      },
      "d2.2xlarge": {
        "Arch": "HVM64"
      },
      "d2.4xlarge": {
        "Arch": "HVM64"
      },
      "d2.8xlarge": {
        "Arch": "HVM64"
      },
      "hi1.4xlarge": {
        "Arch": "HVM64"
      },
      "hs1.8xlarge": {
        "Arch": "HVM64"
      },
      "cr1.8xlarge": {
        "Arch": "HVM64"
      },
      "cc2.8xlarge": {
        "Arch": "HVM64"
      }
    },
    "AWSRegionArch2AMI": {
      "ap-northeast-1": {
        "HVM64": "ami-a958f2c8",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-northeast-2": {
        "HVM64": "ami-52b6613c",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-south-1": {
        "HVM64": "ami-f2c4b09d",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-southeast-1": {
        "HVM64": "ami-f2e64491",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-southeast-2": {
        "HVM64": "ami-17655b74",
        "HVMG2": "NOT_SUPPORTED"
      },
      "eu-central-1": {
        "HVM64": "ami-bd1cd9d2",
        "HVMG2": "NOT_SUPPORTED"
      },
      "eu-west-1": {
        "HVM64": "ami-b0df8cc3",
        "HVMG2": "NOT_SUPPORTED"
      },
      "sa-east-1": {
        "HVM64": "ami-f62eb19a",
        "HVMG2": "NOT_SUPPORTED"
      },
      "us-east-1": {
        "HVM64": "ami-0fbf9518",
        "HVMG2": "NOT_SUPPORTED"
      },
      "us-east-2": {
        "HVM64": "ami-09752f6c",
        "HVMG2": "NOT_SUPPORTED"
      },
      "us-west-1": {
        "HVM64": "ami-47c39627",
        "HVMG2": "NOT_SUPPORTED"
      },
      "us-west-2": {
        "HVM64": "ami-db76dbbb",
        "HVMG2": "NOT_SUPPORTED"
      }
    }
  },
  "Resources": {
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            "vpc",
            "cidr"
          ]
        },
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "VPC"
                ]
              ]
            }
          }
        ]
      }
    },
    "PubSubnetAz1": {
      "DependsOn": "Vpc",
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            "pubsubnet1",
            "cidr"
          ]
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Subnet1"
                ]
              ]
            }
          }
        ]
      }
    },
    "PubSubnetAz2": {
      "DependsOn": "Vpc",
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            "pubsubnet2",
            "cidr"
          ]
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Subnet2"
                ]
              ]
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "DependsOn": "Vpc",
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "IGW"
                ]
              ]
            }
          }
        ]
      }
    },
    "AttachGateway": {
      "DependsOn": [
        "Vpc",
        "InternetGateway"
      ],
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RouteViaIgw": {
      "DependsOn": "Vpc",
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "RT"
                ]
              ]
            }
          }
        ]
      }
    },
    "PublicRouteViaIgw": {
      "DependsOn": [
        "AttachGateway",
        "RouteViaIgw"
      ],
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PubSubnet1RouteTableAssociation": {
      "DependsOn": [
        "PubSubnetAz1",
        "RouteViaIgw"
      ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PubSubnetAz1"
        },
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        }
      }
    },
    "PubSubnet2RouteTableAssociation": {
      "DependsOn": [
        "PubSubnetAz2",
        "RouteViaIgw"
      ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PubSubnetAz2"
        },
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        }
      }
    },
    "SwarmWideSG": {
      "DependsOn": "NodeVpcSG",
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "GroupDescription": "Wide open",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": {
              "Fn::FindInMap": [
                "VpcCidrs",
                "vpc",
                "cidr"
              ]
            }
          }
        ]
      }
    },
    "SwarmSQSCleanup": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "ReceiveMessageWaitTimeSeconds": 10,
        "MessageRetentionPeriod": 43200
      }
    },
    "SwarmSQS": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "ReceiveMessageWaitTimeSeconds": 10,
        "MessageRetentionPeriod": 43200
      }
    },
    "SwarmManagerUpgradeHook": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "DependsOn": "SwarmSQS",
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "ManagerAsg"
        },
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": {
          "Fn::GetAtt": [
            "SwarmSQS",
            "Arn"
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "ProxyRole",
            "Arn"
          ]
        }
      }
    },
    "SwarmWorkerUpgradeHook": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "DependsOn": "SwarmSQS",
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "NodeAsg"
        },
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": {
          "Fn::GetAtt": [
            "SwarmSQS",
            "Arn"
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "ProxyRole",
            "Arn"
          ]
        }
      }
    },
    "ManagerVpcSG": {
      "DependsOn": "NodeVpcSG",
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "GroupDescription": "Manager SecurityGroup",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "2375",
            "ToPort": "2375",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "NodeVpcSG",
                "GroupId"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "2377",
            "ToPort": "2377",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "NodeVpcSG",
                "GroupId"
              ]
            }
          },
          {
            "IpProtocol": "udp",
            "FromPort": "4789",
            "ToPort": "4789",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "NodeVpcSG",
                "GroupId"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "7946",
            "ToPort": "7946",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "NodeVpcSG",
                "GroupId"
              ]
            }
          },
          {
            "IpProtocol": "udp",
            "FromPort": "7946",
            "ToPort": "7946",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "NodeVpcSG",
                "GroupId"
              ]
            }
          }
        ]
      }
    },
    "NodeVpcSG": {
      "DependsOn": "Vpc",
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "GroupDescription": "Node SecurityGroup"
      }
    },
    "SwarmDynDBTable": {
      "DependsOn": "ExternalLoadBalancer",
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "dyndbtable"
            ]
          ]
        },
        "AttributeDefinitions": [
          {
            "AttributeName": "node_type",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "node_type",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      }
    },
    "DockerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "lg"
            ]
          ]
        },
        "RetentionInDays": 7
      }
    },
    "ManagerAsg": {
      "DependsOn": [
        "SwarmDynDBTable",
        "PubSubnetAz1",
        "PubSubnetAz2",
        "UCPLoadBalancer",
        "DTRLoadBalancer",
        "ExternalLoadBalancer"
      ],
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Fn::Join": [
              ",",
              [
                {
                  "Ref": "PubSubnetAz1"
                },
                {
                  "Ref": "PubSubnetAz2"
                }
              ]
            ]
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "ManagerLaunchConfig"
        },
        "LoadBalancerNames": [
          {
            "Ref": "DTRLoadBalancer"
          },
          {
            "Ref": "ExternalLoadBalancer"
          },
          {
            "Ref": "UCPLoadBalancer"
          }
        ],
        "MinSize": "0",
        "MaxSize": "5",
        "DesiredCapacity": {
          "Ref": "ManagerSize"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Manager"
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "swarm-node-type",
            "Value": "manager",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "swarm-stack-id",
            "Value": {
              "Ref": "AWS::StackId"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "DOCKER_FOR_AWS_VERSION",
            "Value": {
              "Fn::FindInMap": [
                "DockerForAWS",
                "version",
                "forAws"
              ]
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "DOCKER_VERSION",
            "Value": {
              "Fn::FindInMap": [
                "DockerForAWS",
                "version",
                "docker"
              ]
            },
            "PropagateAtLaunch": "true"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": {
            "Ref": "ManagerSize"
          },
          "Timeout": "PT1H"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": {
            "Ref": "ManagerSize"
          },
          "MaxBatchSize": "1",
          "WaitOnResourceSignals": "true",
          "PauseTime": "PT1H"
        }
      }
    },
    "ManagerLaunchConfig": {
      "DependsOn": "ExternalLoadBalancer",
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "InstanceType": {
          "Ref": "ManagerInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "ProxyInstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "ManagerInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "AssociatePublicIpAddress": "true",
        "SecurityGroups": [
          {
            "Ref": "ManagerVpcSG"
          },
          {
            "Ref": "SwarmWideSG"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/sh\n",
                "echo \"",
                {
                  "Ref": "ExternalLoadBalancer"
                },
                "\" > /var/lib/docker/swarm/lb_name\n",
                "echo \"# hostname : ELB_name\" >> /var/lib/docker/swarm/elb.config\n",
                "echo \"127.0.0.1: ",
                {
                  "Ref": "ExternalLoadBalancer"
                },
                "\" >> /var/lib/docker/swarm/elb.config\n",
                "echo \"localhost: ",
                {
                  "Ref": "ExternalLoadBalancer"
                },
                "\" >> /var/lib/docker/swarm/elb.config\n",
                "echo \"default: ",
                {
                  "Ref": "ExternalLoadBalancer"
                },
                "\" >> /var/lib/docker/swarm/elb.config\n",
                "export DOCKER_FOR_IAAS_VERSION='",
                {
                  "Fn::FindInMap": [
                    "DockerForAWS",
                    "version",
                    "forAws"
                  ]
                },
                "'\n",
                "export LOCAL_IP=$(wget -qO- http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                "echo '{\"log-driver\": \"awslogs\",\"log-opts\": {\"awslogs-group\":\"",
                {
                  "Fn::Join": [
                    "-",
                    [
                      {
                        "Ref": "AWS::StackName"
                      },
                      "lg"
                    ]
                  ]
                },
                "\" }}' > /etc/docker/daemon.json \n",
                "chown -R docker /home/docker/\n",
                "chgrp -R docker /home/docker/\n",
                "rc-service docker restart\n",
                "sleep 5\n",
                "docker run --log-driver=json-file --name=meta-aws --restart=always -d -p $LOCAL_IP:9024:8080 ",
                "-e AWS_REGION='",
                {
                  "Ref": "AWS::Region"
                },
                "' ",
                "-e MANAGER_SECURITY_GROUP_ID='",
                {
                  "Ref": "ManagerVpcSG"
                },
                "' ",
                "-e WORKER_SECURITY_GROUP_ID='",
                {
                  "Ref": "NodeVpcSG"
                },
                "' ",
                "-v /var/run/docker.sock:/var/run/docker.sock ",
                "docker4x/meta-aws:$DOCKER_FOR_IAAS_VERSION metaserver -flavor=aws\n",
                "docker run --log-driver=json-file --restart=no -d ",
                "-e DYNAMODB_TABLE='",
                {
                  "Ref": "SwarmDynDBTable"
                },
                "' ",
                "-e NODE_TYPE='manager' ",
                "-e HAS_DDC='yes' ",
                "-e REGION='",
                {
                  "Ref": "AWS::Region"
                },
                "' ",
                "-e STACK_NAME='",
                {
                  "Ref": "AWS::StackName"
                },
                "' ",
                "-e STACK_ID='",
                {
                  "Ref": "AWS::StackId"
                },
                "' ",
                "-e ACCOUNT_ID='",
                {
                  "Ref": "AWS::AccountId"
                },
                "' ",
                "-e INSTANCE_NAME='ManagerAsg' ",
                "-e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION ",
                "-v /var/run/docker.sock:/var/run/docker.sock ",
                "-v /usr/bin/docker:/usr/bin/docker ",
                "-v /var/log:/var/log ",
                "docker4x/init-aws:$DOCKER_FOR_IAAS_VERSION\n",
                "docker run --log-driver=json-file --name=guide-aws --restart=always -d ",
                "-e DYNAMODB_TABLE='",
                {
                  "Ref": "SwarmDynDBTable"
                },
                "' ",
                "-e NODE_TYPE='manager' ",
                "-e HAS_DDC='yes' ",
                "-e REGION='",
                {
                  "Ref": "AWS::Region"
                },
                "' ",
                "-e STACK_NAME='",
                {
                  "Ref": "AWS::StackName"
                },
                "' ",
                "-e INSTANCE_NAME='ManagerAsg' ",
                "-e VPC_ID='",
                {
                  "Ref": "Vpc"
                },
                "' ",
                "-e STACK_ID='",
                {
                  "Ref": "AWS::StackId"
                },
                "' ",
                "-e ACCOUNT_ID='",
                {
                  "Ref": "AWS::AccountId"
                },
                "' ",
                "-e SWARM_QUEUE='",
                {
                  "Ref": "SwarmSQS"
                },
                "' ",
                "-e CLEANUP_QUEUE='",
                {
                  "Ref": "SwarmSQSCleanup"
                },
                "' ",
                "-e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION ",
                "-e UCP_ELB_HOSTNAME='",
                {
                  "Fn::GetAtt": [
                    "UCPLoadBalancer",
                    "DNSName"
                  ]
                },
                "' ",
                "-e UCP_ADMIN_USER='",
                {
                  "Ref": "DDCUsernameSet"
                },
                "' ",
                "-e UCP_ADMIN_PASSWORD='",
                {
                  "Ref": "DDCPasswordSet"
                },
                "' ",
                "-v /var/run/docker.sock:/var/run/docker.sock ",
                "-v /usr/bin/docker:/usr/bin/docker ",
                "docker4x/guide-aws:$DOCKER_FOR_IAAS_VERSION\n",
                "docker volume create --name sshkey\n",
                "docker run --log-driver=json-file -ti --rm ",
                "--user root ",
                "-v sshkey:/etc/ssh ",
                "--entrypoint ssh-keygen ",
                "docker4x/shell-aws:$DOCKER_FOR_IAAS_VERSION ",
                "-A\n",
                "docker run --log-driver=json-file --name=shell-aws --restart=always -d -p 22:22 ",
                "-v /home/docker/:/home/docker/ ",
                "-v /var/run/docker.sock:/var/run/docker.sock ",
                "-v /var/lib/docker/swarm/lb_name:/var/lib/docker/swarm/lb_name:ro ",
                "-v /var/lib/docker/swarm/elb.config:/var/lib/docker/swarm/elb.config ",
                "-v /usr/bin/docker:/usr/bin/docker ",
                "-v /var/log:/var/log ",
                "-v sshkey:/etc/ssh ",
                "-v /etc/passwd:/etc/passwd:ro ",
                "-v /etc/shadow:/etc/shadow:ro ",
                "-v /etc/group:/etc/group:ro ",
                "docker4x/shell-aws:$DOCKER_FOR_IAAS_VERSION\n",
                "docker run --log-driver=json-file --name=l4controller-aws --restart=always -d --name=editions_controller ",
                "-v /var/run/docker.sock:/var/run/docker.sock ",
                "-v /var/lib/docker/swarm:/var/lib/docker/swarm ",
                "docker4x/l4controller-aws:$DOCKER_FOR_IAAS_VERSION run --log=4 --all=true\n",
                "docker run --log-driver=json-file --name=ddc-init-aws --restart=on-failure:5 ",
                "-e NODE_TYPE='manager' ",
                "-e DYNAMODB_TABLE='",
                {
                  "Ref": "SwarmDynDBTable"
                },
                "' ",
                "-e STACK_NAME='",
                {
                  "Ref": "AWS::StackName"
                },
                "' ",
                "-e REGION='",
                {
                  "Ref": "AWS::Region"
                },
                "' ",
                "-e UCP_ADMIN_USER='",
                {
                  "Ref": "DDCUsernameSet"
                },
                "' ",
                "-e UCP_ADMIN_PASSWORD='",
                {
                  "Ref": "DDCPasswordSet"
                },
                "' ",
                "-e NODE_NAME=$HOSTNAME ",
                "-e S3_BUCKET_NAME='",
                {
                  "Ref": "DDCBucket"
                },
                "' ",
                "-e LICENSE='",
                {
                  "Ref": "License"
                },
                "' ",
                "-e UCP_ELB_HOSTNAME='",
                {
                  "Fn::GetAtt": [
                    "UCPLoadBalancer",
                    "DNSName"
                  ]
                },
                "' ",
                "-e DTR_ELB_HOSTNAME='",
                {
                  "Fn::GetAtt": [
                    "DTRLoadBalancer",
                    "DNSName"
                  ]
                },
                "' ",
                "-e APP_ELB_HOSTNAME='",
                {
                  "Fn::GetAtt": [
                    "ExternalLoadBalancer",
                    "DNSName"
                  ]
                },
                "' ",
                "-e INSTALL_DDC='yes' ",
                "-e INSTANCE_NAME='ManagerAsg' ",
                "-e MANAGER_COUNT='",
                {
                  "Ref": "ManagerSize"
                },
                "' ",
                "-v /var/run/docker.sock:/var/run/docker.sock ",
                "-v /usr/bin/docker:/usr/bin/docker ",
                "-v /tmp/docker:/tmp/docker ",
                "docker4x/ddc-init-aws:$DOCKER_FOR_IAAS_VERSION\n"
              ]
            ]
          }
        }
      }
    },
    "NodeAsg": {
      "DependsOn": "ManagerAsg",
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Fn::Join": [
              ",",
              [
                {
                  "Ref": "PubSubnetAz1"
                },
                {
                  "Ref": "PubSubnetAz2"
                }
              ]
            ]
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "NodeLaunchConfig"
        },
        "LoadBalancerNames": [
          {
            "Ref": "ExternalLoadBalancer"
          }
        ],
        "MinSize": "0",
        "MaxSize": "1000",
        "DesiredCapacity": {
          "Ref": "ClusterSize"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "worker"
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "swarm-node-type",
            "Value": "worker",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "swarm-stack-id",
            "Value": {
              "Ref": "AWS::StackId"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "DOCKER_FOR_AWS_VERSION",
            "Value": {
              "Fn::FindInMap": [
                "DockerForAWS",
                "version",
                "forAws"
              ]
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "DOCKER_VERSION",
            "Value": {
              "Fn::FindInMap": [
                "DockerForAWS",
                "version",
                "docker"
              ]
            },
            "PropagateAtLaunch": "true"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": {
            "Ref": "ClusterSize"
          },
          "Timeout": "PT2H"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": {
            "Ref": "ClusterSize"
          },
          "MaxBatchSize": "1",
          "WaitOnResourceSignals": "true",
          "PauseTime": "PT1H"
        }
      }
    },
    "NodeLaunchConfig": {
      "DependsOn": "ManagerAsg",
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "ProxyInstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "AssociatePublicIpAddress": "true",
        "SecurityGroups": [
          {
            "Ref": "NodeVpcSG"
          },
          {
            "Ref": "SwarmWideSG"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/sh\n",
                "export DOCKER_FOR_IAAS_VERSION='",
                {
                  "Fn::FindInMap": [
                    "DockerForAWS",
                    "version",
                    "forAws"
                  ]
                },
                "'\n",
                "echo '{\"log-driver\": \"awslogs\",\"log-opts\": {\"awslogs-group\":\"",
                {
                  "Fn::Join": [
                    "-",
                    [
                      {
                        "Ref": "AWS::StackName"
                      },
                      "lg"
                    ]
                  ]
                },
                "\" }}' > /etc/docker/daemon.json \n",
                "chown -R docker /home/docker/\n",
                "chgrp -R docker /home/docker/\n",
                "rc-service docker restart\n",
                "sleep 5\n",
                "docker run --log-driver=json-file --restart=no -d ",
                "-e DYNAMODB_TABLE='",
                {
                  "Ref": "SwarmDynDBTable"
                },
                "' ",
                "-e NODE_TYPE='worker' ",
                "-e HAS_DDC='yes' ",
                "-e REGION='",
                {
                  "Ref": "AWS::Region"
                },
                "' ",
                "-e STACK_NAME='",
                {
                  "Ref": "AWS::StackName"
                },
                "' ",
                "-e STACK_ID='",
                {
                  "Ref": "AWS::StackId"
                },
                "' ",
                "-e ACCOUNT_ID='",
                {
                  "Ref": "AWS::AccountId"
                },
                "' ",
                "-e INSTANCE_NAME='NodeAsg' ",
                "-e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION ",
                "-v /var/run/docker.sock:/var/run/docker.sock ",
                "-v /usr/bin/docker:/usr/bin/docker ",
                "-v /var/log:/var/log ",
                "docker4x/init-aws:$DOCKER_FOR_IAAS_VERSION\n",
                "docker run --log-driver=json-file --name=guide-aws --restart=always -d ",
                "-e DYNAMODB_TABLE='",
                {
                  "Ref": "SwarmDynDBTable"
                },
                "' ",
                "-e NODE_TYPE='worker' ",
                "-e HAS_DDC='yes' ",
                "-e REGION='",
                {
                  "Ref": "AWS::Region"
                },
                "' ",
                "-e STACK_NAME='",
                {
                  "Ref": "AWS::StackName"
                },
                "' ",
                "-e INSTANCE_NAME='NodeAsg' ",
                "-e VPC_ID='",
                {
                  "Ref": "Vpc"
                },
                "' ",
                "-e STACK_ID='",
                {
                  "Ref": "AWS::StackId"
                },
                "' ",
                "-e ACCOUNT_ID='",
                {
                  "Ref": "AWS::AccountId"
                },
                "' ",
                "-e SWARM_QUEUE='",
                {
                  "Ref": "SwarmSQS"
                },
                "' ",
                "-e CLEANUP_QUEUE='",
                {
                  "Ref": "SwarmSQSCleanup"
                },
                "' ",
                "-e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION ",
                "-e UCP_ELB_HOSTNAME='",
                {
                  "Fn::GetAtt": [
                    "UCPLoadBalancer",
                    "DNSName"
                  ]
                },
                "' ",
                "-e UCP_ADMIN_USER='",
                {
                  "Ref": "DDCUsernameSet"
                },
                "' ",
                "-e UCP_ADMIN_PASSWORD='",
                {
                  "Ref": "DDCPasswordSet"
                },
                "' ",
                "-v /var/run/docker.sock:/var/run/docker.sock ",
                "-v /usr/bin/docker:/usr/bin/docker ",
                "docker4x/guide-aws:$DOCKER_FOR_IAAS_VERSION\n",
                "docker run --log-driver=json-file --name=ddc-init-aws --restart=on-failure:5  ",
                "-e NODE_TYPE='worker' ",
                "-e DYNAMODB_TABLE='",
                {
                  "Ref": "SwarmDynDBTable"
                },
                "' ",
                "-e STACK_NAME='",
                {
                  "Ref": "AWS::StackName"
                },
                "' ",
                "-e REGION='",
                {
                  "Ref": "AWS::Region"
                },
                "' ",
                "-e UCP_ADMIN_USER='",
                {
                  "Ref": "DDCUsernameSet"
                },
                "' ",
                "-e UCP_ADMIN_PASSWORD='",
                {
                  "Ref": "DDCPasswordSet"
                },
                "' ",
                "-e APP_ELB_HOSTNAME='",
                {
                  "Fn::GetAtt": [
                    "ExternalLoadBalancer",
                    "DNSName"
                  ]
                },
                "' ",
                "-e INSTANCE_NAME='NodeAsg' ",
                "-e INSTALL_DDC='yes' ",
                "-e MANAGER_COUNT='",
                {
                  "Ref": "ManagerSize"
                },
                "' ",
                "-v /var/run/docker.sock:/var/run/docker.sock ",
                "-v /usr/bin/docker:/usr/bin/docker ",
                "docker4x/ddc-init-aws:$DOCKER_FOR_IAAS_VERSION\n"
              ]
            ]
          }
        }
      }
    },
    "ExternalLoadBalancerSG": {
      "DependsOn": "Vpc",
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "GroupDescription": "External Load Balancer SecurityGroup",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "ExternalLoadBalancer": {
      "DependsOn": [
        "AttachGateway",
        "ExternalLoadBalancerSG",
        "PubSubnetAz1",
        "PubSubnetAz2"
      ],
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "ConnectionSettings": {
          "IdleTimeout": "600"
        },
        "Subnets": [
          {
            "Ref": "PubSubnetAz1"
          },
          {
            "Ref": "PubSubnetAz2"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "7",
            "InstancePort": "7",
            "Protocol": "TCP"
          }
        ],
        "LoadBalancerName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "ELB"
            ]
          ]
        },
        "CrossZone": "true",
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "10",
          "Target": "TCP:2375",
          "Timeout": "2",
          "UnhealthyThreshold": "4"
        },
        "SecurityGroups": [
          {
            "Ref": "ExternalLoadBalancerSG"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "ELB"
                ]
              ]
            }
          }
        ]
      }
    },
    "UCPLoadBalancerSG": {
      "DependsOn": "Vpc",
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "GroupDescription": "UCP Load Balancer SecurityGroup",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "UCPLoadBalancer": {
      "DependsOn": [
        "AttachGateway",
        "PubSubnetAz1",
        "PubSubnetAz2"
      ],
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "ConnectionSettings": {
          "IdleTimeout": "1800"
        },
        "Subnets": [
          {
            "Ref": "PubSubnetAz1"
          },
          {
            "Ref": "PubSubnetAz2"
          }
        ],
        "LoadBalancerName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "ELB-UCP"
            ]
          ]
        },
        "CrossZone": "true",
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "10",
          "Target": "TCP:443",
          "Timeout": "2",
          "UnhealthyThreshold": "4"
        },
        "Listeners": [
          {
            "LoadBalancerPort": "443",
            "InstancePort": "443",
            "Protocol": "TCP"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "UCPLoadBalancerSG"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "ELB-UCP"
                ]
              ]
            }
          }
        ]
      }
    },
    "DTRLoadBalancerSG": {
      "DependsOn": "Vpc",
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "GroupDescription": "DTR Load Balancer SecurityGroup",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "DTRLoadBalancer": {
      "DependsOn": [
        "AttachGateway",
        "PubSubnetAz1",
        "PubSubnetAz2"
      ],
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "ConnectionSettings": {
          "IdleTimeout": "1800"
        },
        "Subnets": [
          {
            "Ref": "PubSubnetAz1"
          },
          {
            "Ref": "PubSubnetAz2"
          }
        ],
        "LoadBalancerName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "ELB-DTR"
            ]
          ]
        },
        "CrossZone": "true",
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "10",
          "Target": "HTTPS:8443/health",
          "Timeout": "2",
          "UnhealthyThreshold": "4"
        },
        "Listeners": [
          {
            "LoadBalancerPort": "443",
            "InstancePort": "8443",
            "Protocol": "TCP"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "DTRLoadBalancerSG"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "ELB-DTR"
                ]
              ]
            }
          }
        ]
      }
    },
    "DDCBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain"
    },
    "ProxyRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com",
                  "autoscaling.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "CFPolicies": {
      "DependsOn": "ProxyRole",
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CF-getstatus",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:DescribeStacks",
                "cloudformation:DescribeStackResources"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "ProxyRole"
          }
        ]
      }
    },
    "S3Policies": {
      "DependsOn": "ProxyRole",
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "S3-DDC-Policy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket",
                "s3:GetBucketLocation",
                "s3:ListBucketMultipartUploads"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "DDCBucket"
                    }
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject",
                "s3:ListMultipartUploadParts",
                "s3:AbortMultipartUpload"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "DDCBucket"
                    },
                    "/*"
                  ]
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "ProxyRole"
          }
        ]
      }
    },
    "DynDBPolicies": {
      "DependsOn": [
        "SwarmDynDBTable",
        "ProxyRole"
      ],
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "dyndb-getput",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:DeleteItem",
                "dynamodb:GetItem",
                "dynamodb:UpdateItem",
                "dynamodb:Query"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:dynamodb:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":table/",
                    {
                      "Ref": "SwarmDynDBTable"
                    }
                  ]
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "ProxyRole"
          }
        ]
      }
    },
    "SwarmAPIPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "swarm-policy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeInstances",
                "ec2:DescribeVpcAttribute",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "ProxyRole"
          }
        ]
      }
    },
    "SwarmSQSPolicy": {
      "DependsOn": [
        "ProxyRole",
        "SwarmSQS"
      ],
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "swarm-sqs-policy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "sqs:*",
              "Resource": {
                "Fn::GetAtt": [
                  "SwarmSQS",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "ProxyRole"
          }
        ]
      }
    },
    "SwarmSQSCleanupPolicy": {
      "DependsOn": [
        "ProxyRole",
        "SwarmSQSCleanup"
      ],
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "swarm-sqs-cleanup-policy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "sqs:*",
              "Resource": {
                "Fn::GetAtt": [
                  "SwarmSQSCleanup",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "ProxyRole"
          }
        ]
      }
    },
    "SwarmAutoscalePolicy": {
      "DependsOn": "ProxyRole",
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "swarm-autoscale-policy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "autoscaling:*",
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "ProxyRole"
          }
        ]
      }
    },
    "ProxyPolicies": {
      "DependsOn": "ProxyRole",
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "elb-update",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "elasticloadbalancing:*",
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "ProxyRole"
          }
        ]
      }
    },
    "ProxyInstanceProfile": {
      "DependsOn": "ProxyRole",
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "ProxyRole"
          }
        ]
      }
    }
  },
  "Outputs": {
    "UCPLoginURL": {
      "Description": "Docker Datacenter UCP Login URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "UCPLoadBalancer",
                "DNSName"
              ]
            }
          ]
        ]
      }
    },
    "DTRLoginURL": {
      "Description": "Docker Datacenter DTR Login URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "DTRLoadBalancer",
                "DNSName"
              ]
            }
          ]
        ]
      }
    },
    "DefaultDNSTarget": {
      "Description": "Default DNS name for applications deployed on the cluster",
      "Value": {
        "Fn::GetAtt": [
          "ExternalLoadBalancer",
          "DNSName"
        ]
      }
    },
    "DDCUsername": {
      "Description": "Docker Datacenter Username",
      "Value": {
        "Ref": "DDCUsernameSet"
      }
    }
  }
}
